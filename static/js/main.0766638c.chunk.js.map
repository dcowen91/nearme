{"version":3,"sources":["App.tsx","index.tsx"],"names":["Map","ReactMapboxGl","accessToken","process","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","debouncedGetArticles","debounce","getArticles","state","latitude","longitude","showErrorDialog","selectedItemIndex","items","_this2","navigator","geolocation","getCurrentPosition","pos","setState","coords","_prevProps","prevState","_this3","react_default","a","createElement","className","style","containerStyle","height","width","center","onMoveEnd","map","console","log","isNaN","transform","_center","lat","lng","renderPopUp","lib_esm","type","id","layout","icon-image","icon-size","item","index","coordinates","onClick","offset","bottom-left","bottom-right","title","_this4","url","concat","axios","get","then","res","wikiItems","data","query","geosearch","responseItem","lon","pageId","pageid","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"0SA4BMA,EAAMC,YAAc,CACxBC,YAAaC,+FAqIAC,cA/Hb,SAAAA,EAAYC,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHRQ,qBAAuBC,YAASR,EAAKS,YAAa,KAKhDT,EAAKU,MAAQ,CACXC,SAAU,WACVC,WAAY,YACZC,iBAAiB,EACjBC,mBAAoB,EACpBC,MAAO,IARYf,mFAYG,IAAAgB,EAAAb,KACxBc,UAAUC,YAAYC,mBACpB,SAACC,GACCJ,EAAKK,SAAS,CACZV,SAAUS,EAAIE,OAAOX,SACrBC,UAAWQ,EAAIE,OAAOV,YAGxBI,EAAKP,eAEP,WAEEO,EAAKK,SAAS,CAAER,iBAAiB,iDAKpBU,EAAgBC,GAE/BA,EAAUb,WAAaR,KAAKO,MAAMC,UAClCa,EAAUZ,YAAcT,KAAKO,MAAME,WAEnCT,KAAKI,wDAKa,IAAAkB,EAAAtB,KACpB,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAc,UAChCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAClC,EAAD,CACEoC,MAAM,kCACNC,eAAgB,CACdC,OAAQ,OACRC,MAAO,QAETC,OAAQ,CAAC/B,KAAKO,MAAME,UAAWT,KAAKO,MAAMC,UAC1CwB,UAAW,SAAAC,GACTC,QAAQC,IAAI,SAEPC,MAAMH,EAAII,UAAUC,QAAQC,MAC/BjB,EAAKJ,SAAS,CACZV,SAAUyB,EAAII,UAAUC,QAAQC,IAChC9B,UAAWwB,EAAII,UAAUC,QAAQE,QAKtCxC,KAAKyC,cACNlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,KAAK,SACLC,GAAG,SACHC,OAAQ,CACNC,aAAc,YACdC,YAAa,IAId/C,KAAKO,MAAMK,MAAMqB,IAAI,SAACe,EAAMC,GAAP,OACpB1B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEQ,YAAa,CAACF,EAAKvC,UAAWuC,EAAKxC,UACnC2C,QAAS,kBAAM7B,EAAKJ,SAAS,CAAEP,kBAAmBsC,oDAYlE,GAAIjD,KAAKO,MAAMI,mBAAqB,EAAG,CACrC,IAAMqC,EAAOhD,KAAKO,MAAMK,MAAMZ,KAAKO,MAAMI,mBACzC,OACEY,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEQ,YAAa,CAACF,EAAKvC,UAAWuC,EAAKxC,UACnC4C,OAAQ,CACNC,cAAe,CAAC,IAAK,IACrBC,eAAgB,EAAE,IAAK,MAGzB/B,EAAAC,EAAAC,cAAA,UAAKuB,EAAKO,+CAOE,IAAAC,EAAAxD,KACZyD,EAAG,yFAAAC,OACP1D,KAAKO,MAAMC,SADJ,KAAAkD,OAEL1D,KAAKO,MAAME,UAFN,yBAITkD,IAAMC,IAAIH,GAAKI,KAAK,SAAAC,GAClB,IAAMC,EAAyBD,EAAIE,KAAKC,MAAMC,UAAUjC,IACtD,SAACkC,GACC,MAAO,CACL3D,SAAU2D,EAAa5B,IACvB9B,UAAW0D,EAAaC,IACxBC,OAAQF,EAAaG,OACrBf,MAAOY,EAAaZ,SAK1BC,EAAKtC,SAAS,CAAEN,MAAOmD,aA7HXQ,IAAMC,WC3BxBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.0766638c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport ReactMapboxGl, { Layer, Feature, Popup } from \"react-mapbox-gl\";\r\nimport axios from \"axios\";\r\nimport { debounce } from \"lodash-es\";\r\n\r\ninterface IWikipediaResponse {\r\n  lat: number;\r\n  lon: number;\r\n  pageid: number;\r\n  title: number;\r\n}\r\n\r\ninterface IWikiItem {\r\n  latitude: number;\r\n  longitude: number;\r\n  pageId: number;\r\n  title: string;\r\n}\r\n\r\ninterface IAppState {\r\n  latitude: number;\r\n  longitude: number;\r\n  selectedItemIndex: number;\r\n  showErrorDialog: boolean;\r\n  items: IWikiItem[];\r\n}\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: process.env.REACT_APP_MAPBOX_TOKEN as string\r\n});\r\n\r\nclass App extends React.Component<{}, IAppState> {\r\n  debouncedGetArticles = debounce(this.getArticles, 500);\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      latitude: 47.6072062,\r\n      longitude: -122.3350407,\r\n      showErrorDialog: false,\r\n      selectedItemIndex: -1,\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (pos: Position) => {\r\n        this.setState({\r\n          latitude: pos.coords.latitude,\r\n          longitude: pos.coords.longitude\r\n        });\r\n\r\n        this.getArticles();\r\n      },\r\n      () => {\r\n        // TODO render error if location permission not granted\r\n        this.setState({ showErrorDialog: true });\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(_prevProps: {}, prevState: IAppState): void {\r\n    if (\r\n      prevState.latitude !== this.state.latitude ||\r\n      prevState.longitude !== this.state.longitude\r\n    ) {\r\n      this.debouncedGetArticles();\r\n      // TODO debounce/ add min change threshold\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">{\"NEARME\"}</header>\r\n        <div className=\"mapContainer\">\r\n          <div className=\"mapInner\">\r\n            <Map\r\n              style=\"mapbox://styles/mapbox/dark-v10\"\r\n              containerStyle={{\r\n                height: \"100%\",\r\n                width: \"100%\"\r\n              }}\r\n              center={[this.state.longitude, this.state.latitude]}\r\n              onMoveEnd={map => {\r\n                console.log(\"MOVED\");\r\n                // TODO there is clearly a bug here, find a better way to keep this in sync\r\n                if (!isNaN(map.transform._center.lat)) {\r\n                  this.setState({\r\n                    latitude: map.transform._center.lat,\r\n                    longitude: map.transform._center.lng\r\n                  });\r\n                }\r\n              }}\r\n            >\r\n              {this.renderPopUp()}\r\n              <Layer\r\n                type=\"symbol\"\r\n                id=\"marker\"\r\n                layout={{\r\n                  \"icon-image\": \"marker-15\",\r\n                  \"icon-size\": 2\r\n                  //   \"icon-color\": \"#f2e353\"\r\n                }}\r\n              >\r\n                {this.state.items.map((item, index) => (\r\n                  <Feature\r\n                    coordinates={[item.longitude, item.latitude]}\r\n                    onClick={() => this.setState({ selectedItemIndex: index })}\r\n                  />\r\n                ))}\r\n              </Layer>\r\n            </Map>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderPopUp(): JSX.Element | undefined {\r\n    if (this.state.selectedItemIndex >= 0) {\r\n      const item = this.state.items[this.state.selectedItemIndex];\r\n      return (\r\n        <Popup\r\n          coordinates={[item.longitude, item.latitude]}\r\n          offset={{\r\n            \"bottom-left\": [12, -38],\r\n            \"bottom-right\": [-12, -38]\r\n          }}\r\n        >\r\n          <h4>{item.title}</h4>\r\n        </Popup>\r\n      );\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  getArticles(): void {\r\n    const url = `https://en.wikipedia.org/w/api.php?action=query&list=geosearch&gsradius=10000&gscoord=${\r\n      this.state.latitude\r\n    }|${this.state.longitude}&format=json&origin=*`;\r\n\r\n    axios.get(url).then(res => {\r\n      const wikiItems: IWikiItem[] = res.data.query.geosearch.map(\r\n        (responseItem: IWikipediaResponse) => {\r\n          return {\r\n            latitude: responseItem.lat,\r\n            longitude: responseItem.lon,\r\n            pageId: responseItem.pageid,\r\n            title: responseItem.title\r\n          };\r\n        }\r\n      );\r\n\r\n      this.setState({ items: wikiItems });\r\n    });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}